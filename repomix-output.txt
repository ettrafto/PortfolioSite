This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-01T19:31:43.139Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
package.json
public/index.html
public/manifest.json
public/robots.txt
README.md
src/App.css
src/App.js
src/App.test.js
src/components/contact/ContactForm.css
src/components/contact/util/UnderConstruction.css
src/components/contact/util/UnderConstruction.js
src/components/manager/ManagerNavBar.js
src/components/manager/PrivateRoute.js
src/components/nav/NavBar.css
src/components/nav/NavBar.js
src/components/Profile/PerlinNoise.css
src/components/Profile/PerlinNoise.js
src/components/Profile/PerlinNoiseCircle.js
src/components/timeline/Timeline.css
src/components/timeline/Timeline.js
src/components/work/Card.css
src/components/work/Card.js
src/components/work/DetailView.css
src/components/work/DetailView.js
src/components/work/ImgGallery.js
src/components/work/ProjectData/projects.js
src/components/work/Thumbnail.js
src/context/AuthContext.js
src/index.css
src/index.js
src/logo.svg
src/pages/About.js
src/pages/Blog.js
src/pages/Contact.js
src/pages/Home.css
src/pages/Home.js
src/pages/manager/Manager.css
src/pages/manager/Manager.js
src/pages/manager/ManagerAddBlog.js
src/pages/manager/ManagerAddPost.js
src/pages/manager/ManagerBlogs.js
src/pages/manager/ManagerPosts.js
src/pages/manager/UpdateBlog.js
src/pages/manager/UpdatePost.js
src/pages/Work.css
src/pages/Work.js
src/reportWebVitals.js
src/services/api/blogs.js
src/services/api/posts.js
src/setupTests.js

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
/src/components/contact/ContactForm.js

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: package.json
================
{
  "name": "portfolio-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@builder.io/react": "^4.0.1",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.7.2",
    "framer-motion": "^11.2.12",
    "p5": "^1.9.4",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.23.1",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Evan Trafton's Website"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Evan Trafton</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: src/App.css
================
.App {

}


.privacy-screen {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: black;
  z-index: 3;
}
/* Customize scrollbar appearance */
*::-webkit-scrollbar {
  width: 10px; /* Adjust scrollbar width */
  background-color: black;
}

*::-webkit-scrollbar-thumb {
  background-color: rgba(253, 253, 253, 0.3);
  border-radius: 10px;
  z-index: 200;
}

================
File: src/App.js
================
import React from 'react';
import { useLocation, useRoutes } from 'react-router-dom';
import { AnimatePresence } from 'framer-motion';
import { AuthProvider } from './context/AuthContext';

import './App.css'
import NavBar from './components/nav/NavBar';
import Home from './pages/Home';
import Work from './pages/Work';
import About from './pages/About';
import Blog from './pages/Blog';
import Contact from './pages/Contact';
/*
import Manager from './pages/manager/Manager';
import PrivateRoute from './components/manager/PrivateRoute';
import ManagerBlogs from './pages/manager/ManagerBlogs';
import ManagerAddBlog from './pages/manager/ManagerAddBlog';
import UpdateBlog from './pages/manager/UpdateBlog';
import ManagerPosts from './pages/manager/ManagerPosts';
import ManagerAddPost from './pages/manager/ManagerAddPost';
import UpdatePost from './pages/manager/UpdatePost';
*/
const App = () => {
  const location = useLocation();

  const element = useRoutes([
    { path: "/", element: <Home /> },
    { path: "/work", element: <Work /> },
    { path: "/about", element: <About /> },
    { path: "/blog", element: <Blog /> },
    { path: "/contact", element: <Contact /> },
    /*
    { path: "/manager", element: <Manager /> },
    { path: "/manager/blog", element: <PrivateRoute element={<ManagerBlogs />} /> },
    { path: "/manager/add-blog", element: <PrivateRoute element={<ManagerAddBlog />} /> },
    { path: "/manager/posts", element: <PrivateRoute element={<ManagerPosts />} /> },
    { path: "/manager/add-post", element: <PrivateRoute element={<ManagerAddPost />} /> },
    { path: "/manager/update-post/:id", element: <PrivateRoute element={<UpdatePost />} /> },
    { path: "/manager/update-blog/:id", element: <PrivateRoute element={<UpdateBlog />} /> },
     */
  ]);

  if (!element) return null;

  return (
    <AuthProvider>
      <div className="App">
        <NavBar />
        <AnimatePresence mode="wait" initial={false}>
          {React.cloneElement(element, { key: location.pathname })}
        </AnimatePresence>
      </div>
    </AuthProvider>
  );
};

export default App;

================
File: src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/components/contact/ContactForm.css
================
.contact-form-container {
    max-width: 500px;
    margin: 0 auto;
    padding: 2em;
    background-color: #f9f9f9;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

h2 {
    text-align: center;
    color: #333;
}

.form-group {
    margin-bottom: 1em;
}

label {
    display: block;
    font-weight: bold;
    color: #333;
    margin-bottom: 0.5em;
}

input, textarea {
    width: 100%;
    padding: 0.5em;
    font-size: 1em;
    border: 1px solid #ddd;
    border-radius: 4px;
}

textarea {
    resize: vertical;
    min-height: 100px;
}

button {
    width: 100%;
    padding: 0.75em;
    font-size: 1em;
    color: #fff;
    background-color: #4d4d4d;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: #232430;
}

.error-message {
    color: #f25858;
    font-size: 0.9em;
}

.success-message {
    color: #58f258;
    font-size: 1em;
    text-align: center;
    margin-top: 1em;
}

================
File: src/components/contact/util/UnderConstruction.css
================
/* Styles for the container */
.construction-container {
    margin: 10% auto;
    padding: 20px;
    max-width: 300px;  /* Restrict maximum width for larger screens */
    border: 2px solid #dcdcdc;  /* Light border around the card */
    border-radius: 8px;  /* Rounded corners */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);  /* Subtle shadow */
    text-align: center;
    background-color: #f9f9f9;
    transition: transform 0.2s ease;  /* Slight hover effect */
}


/* Styles for the image */
.construction-container img {
    max-width: 80%;  /* Responsive size, relative to the container */
    height: auto;
    margin-bottom: 15px;
}

/* Styles for the heading */
.construction-container h2 {
    font-size: 1.2rem;
    color: #333;
    margin: 0;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .construction-container {
        max-width: 80%;
        padding: 15px;
    }

    .construction-container h2 {
        font-size: 1rem;
    }
}

@media (max-width: 480px) {
    .construction-container {
        max-width: 90%;
        padding: 10px;
    }

    .construction-container img {
        max-width: 70%;
    }
}

================
File: src/components/contact/util/UnderConstruction.js
================
import React from "react";
import './UnderConstruction.css';

const UnderConstruction = () => {
    return (
        <div className='construction-container'>
            <img src='icons/construction.png' alt='Under Construction Icon' />
            <h2>Under Construction</h2>
        </div>
    );
}

export default UnderConstruction;

================
File: src/components/manager/ManagerNavBar.js
================
import React from 'react';
import { Link } from 'react-router-dom';
import '../nav/NavBar.css';

const ManagerNavBar = () => {
  return (
    <nav className="navbar">
      <ul>
        <li><Link to="/manager/blog">Manage Blogs</Link></li>
        <li><Link to="/manager/add-blog">Add Blog</Link></li>
        <li><Link to="/manager/posts">Manage Posts</Link></li>
        <li><Link to="/manager/add-post">Add Post</Link></li>
      </ul>
    </nav>
  );
};

export default ManagerNavBar;

================
File: src/components/manager/PrivateRoute.js
================
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';

const PrivateRoute = ({ element }) => {
  const { isAuthenticated } = useAuth();
  return isAuthenticated ? element : <Navigate to="/manager" />;
};

export default PrivateRoute;

================
File: src/components/nav/NavBar.css
================
.navbar {
  background-color: black;
  overflow: hidden;
  position: sticky;
  top: 0;
  width: 100%;
  z-index: 1000;
}

.navbar ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
}

.navbar li {
  display: inline;
  padding: 1em 3em;
}

.navbar a {
  font-size: 18px;
  color: #e1e1e1;
  font-family: inherit;
  font-weight: 800;
  cursor: pointer;
  position: relative;
  border: none;
  background: none;
  text-transform: uppercase;
  transition-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1);
  transition-duration: 400ms;
  transition-property: color;
  text-decoration: none;
}

.navbar a:focus,
.navbar a:hover {
  color: #fff;
}

.navbar a:focus:after,
.navbar a:hover:after {
  width: 100%;
  left: 0%;
}

.navbar a:after {
  content: "";
  pointer-events: none;
  bottom: -2px;
  left: 50%;
  position: absolute;
  width: 0%;
  height: 2px;
  background-color: #fff;
  transition-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1);
  transition-duration: 400ms;
  transition-property: width, left;
}

/* MEDIA QUERIES */

/* Adjust for tablets (up to 768px) */
@media (max-width: 768px) {
  .navbar ul {
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }

  .navbar li {
    padding: 1em;
  }

  .navbar a {
    font-size: 16px;
  }
}

/* Adjust for mobile devices (up to 480px) */
@media (max-width: 480px) {
  .navbar ul {
    flex-direction: column;
    padding: 0;
  }

  .navbar li {
    padding: 0.8em;
  }

  .navbar a {
    font-size: 14px;
  }
}

================
File: src/components/nav/NavBar.js
================
import React from 'react';
import { Link } from 'react-router-dom';
import './NavBar.css';

const NavBar = () => {
  return (
    <nav className="navbar">
      <ul>
        <li><Link to="/">HOME</Link></li>
        <li><Link to="/work">WORK</Link></li>
        <li><Link to="/about">ABOUT</Link></li>
        <li><Link to="/contact">CONTACT</Link></li>
      </ul>
    </nav>
  );
};

export default NavBar;

================
File: src/components/Profile/PerlinNoise.css
================
.perlin-bubble {
    width: 100%;
    height: auto;
    
}

================
File: src/components/Profile/PerlinNoise.js
================
// PerlinNoise.js
const grad3 = [
    [1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0],
    [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1],
    [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]
  ];
  
  const p = [];
  for (let i = 0; i < 256; i++) {
    p[i] = Math.floor(Math.random() * 256);
  }
  
  const perm = [];
  for (let i = 0; i < 512; i++) {
    perm[i] = p[i & 255];
  }
  
  const dot = (g, x, y) => g[0] * x + g[1] * y;
  
  const mix = (a, b, t) => (1 - t) * a + t * b;
  
  const fade = (t) => t * t * t * (t * (t * 6 - 15) + 10);
  
  const noise = (x, y) => {
    const X = Math.floor(x) & 255;
    const Y = Math.floor(y) & 255;
  
    const xf = x - Math.floor(x);
    const yf = y - Math.floor(y);
  
    const topRight = [xf - 1.0, yf - 1.0];
    const topLeft = [xf, yf - 1.0];
    const bottomRight = [xf - 1.0, yf];
    const bottomLeft = [xf, yf];
  
    const valueTopRight = perm[X + 1 + perm[Y + 1]] % 12;
    const valueTopLeft = perm[X + perm[Y + 1]] % 12;
    const valueBottomRight = perm[X + 1 + perm[Y]] % 12;
    const valueBottomLeft = perm[X + perm[Y]] % 12;
  
    const dotTopRight = dot(grad3[valueTopRight], topRight[0], topRight[1]);
    const dotTopLeft = dot(grad3[valueTopLeft], topLeft[0], topLeft[1]);
    const dotBottomRight = dot(grad3[valueBottomRight], bottomRight[0], bottomRight[1]);
    const dotBottomLeft = dot(grad3[valueBottomLeft], bottomLeft[0], bottomLeft[1]);
  
    const u = fade(xf);
    const v = fade(yf);
  
    return mix(mix(dotBottomLeft, dotBottomRight, u), mix(dotTopLeft, dotTopRight, u), v);
  };
  
  export default noise;

================
File: src/components/Profile/PerlinNoiseCircle.js
================
import React, { useEffect, useState } from "react";
import { motion, useAnimationFrame } from "framer-motion";
import noise from "./PerlinNoise";
import profileImg from './profile.JPG';
import './PerlinNoise.css'

const generateNoisePath = (cx, cy, r, resolution, t, nInt, nAmp) => {
  let path = "";
  for (let a = 0; a <= Math.PI * 2; a += Math.PI * 2 / resolution) {
    const xOff = Math.cos(a) * nInt;
    const yOff = Math.sin(a) * nInt;
    const noiseVal = noise(xOff + t, yOff + t) * nAmp + 1;
    const x = cx + Math.cos(a) * r * noiseVal;
    const y = cy + Math.sin(a) * r * noiseVal;
    path += `${a === 0 ? "M" : "L"}${x},${y} `;
  }
  path += "Z";
  return path;
};

const PerlinNoiseCircle = ({ resolution = 2060, nInt = 6, nAmp = 0.12 }) => {
  const [t, setT] = useState(0);
  const [path, setPath] = useState("");
  const [size, setSize] = useState({ width: 400, height: 400, r: 160 });

const updateSize = () => {
  const newWidth = window.innerWidth * 0.5;
  const newHeight = window.innerWidth * 0.27;
  const newR = Math.min(newWidth, newHeight) * 0.75; // Reduce multiplier for better fitting
  setSize({ width: newWidth, height: newHeight, r: newR });
};


  useEffect(() => {
    window.addEventListener("resize", updateSize);
    updateSize();
    return () => window.removeEventListener("resize", updateSize);
  }, []);

  useEffect(() => {
    setPath(generateNoisePath(size.width / 2, size.height / 2, size.r, resolution, t, nInt, nAmp));
  }, [t, size, resolution, nInt, nAmp]);

  useAnimationFrame(() => {
    setT(t + 0.02);
  });

  return (
    <div className='' style={{ position: "relative", width: size.width, height: size.height*1.7 }}>
      <svg width={size.width} height={size.height*1.7} viewBox={`0 0 ${size.width} ${size.height}`}>
        <motion.path
          d={path}
          fill="black"
          stroke="black"
          strokeWidth="1"
          animate={{ pathLength: [1, 1] }}
          transition={{ duration: 4, repeat: Infinity, ease: "linear" }}
        />
      </svg>
      <div
        style={{
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: `translate(-50%, -50%)`,
          width: 2 * (size.r * 0.8),
          height: 2 * (size.r * 0.8),
          borderRadius: "50%",
          backgroundImage: `url(${profileImg})`,
          backgroundSize: "cover",
          zIndex: 2,
          border: "1px solid black"
        }}
      ></div>
    </div>
  );
};

export default PerlinNoiseCircle;

================
File: src/components/timeline/Timeline.css
================
.timeline-container {
    position: relative;
    padding-bottom: 50px;
  }
  
  .details {
    text-align: center;
    margin-bottom: 20px;
  }
  
  .timeline {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    display: flex;
    justify-content: center;
    background: #f0f0f0;
    padding: 10px 0;
  }
  
  .timeline-item {
    position: relative;
    margin: 0 30px;
    cursor: pointer;
  }
  
  .timeline-icon {
    width: 50px;
    transition: transform 0.3s ease;
  }
  
  .timeline-icon.hovered {
    transform: scale(1.2);
  }
  
  .tooltip {
    position: absolute;
    bottom: 70px;
    left: 50%;
    transform: translateX(-50%);
    background: white;
    border: 1px solid #ccc;
    padding: 5px;
    text-align: center;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    white-space: nowrap;
  }
  
  .tooltip img {
    width: 30px;
    height: 30px;
    display: block;
    margin: 0 auto 5px;
  }
  
  .tooltip span {
    font-size: 12px;
  }

================
File: src/components/timeline/Timeline.js
================
import React, { useState, useEffect } from 'react';
import './Timeline.css';

const skillType = {
    
};

const timelineData = [
  { id: 1, title: 'Spy.py', date: '2023-01-01', iconImg: '/icons/spyglass.png', img: '', description: 'Spy.py description', skills: '', link: '', gitLink:'' },
  { id: 2, title: 'PhotoSift', date: '2023-07-01', iconImg: '/icons/sort.png', img: '', description: 'Photosift description', skills: '', link: '', gitLink:'' },
  { id: 3, title: 'MySafari', date: '2022-01-01', iconImg: '/icons/mySafari.png', img: '', description: 'MySafari description', skills: '', link: '', gitLink:''},
  { id: 4, title: 'ScubaDiver', date: '', iconImg: '/icons/scubaDiver.png', img: '', description: 'ScubaDiver description', skills: '', link: '', gitLink:''},
  { id: 5, title: 'OurOutdoors', date: '', iconImg: '/icons/ourOutdoors.png', img: '', description: 'OurOutdoors description', skills: '', link: '', gitLink:''},
  { id: 6, title: 'Are We Cyborgs?', date: '', iconImg: '/icons/cyborgs.png', img: '', description: 'Are We Cyborgs? description', skills: '', link: '', gitLink:''},
  { id: 7, title: 'Mastermind', date: '', iconImg: '/icons/mastermind.png', img: '', description: 'Mastermind description', skills: '', link: '', gitLink:''},
  { id: 8, title: 'Timelock', date: '', iconImg: '/icons/timelock.png', img: '', description: 'Timelock description', skills: '', link: '', gitLink:''},
  //{ id: 9, title: 'Portfolio', date: '', iconImg: '/icons/portfolio.png', img: '', description: 'Portfolio description', skills: '', link: '', gitLink:''},
  //{ id: 9, title: 'Whoop Stuff', date: '', iconImg: '/icons/whoop.png', img: '', description: 'Whoop description', skills: '', link: '', gitLink:''}


  // Add more events as needed
];

// Sort timelineData by date
const sortedTimelineData = timelineData.sort((a, b) => new Date(a.date) - new Date(b.date));

const Timeline = () => {
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [hoveredEvent, setHoveredEvent] = useState(null);
  const [iconSizes, setIconSizes] = useState(sortedTimelineData.map(() => 1));

  useEffect(() => {
    const handleMouseMove = (e) => {
      const windowHeight = window.innerHeight;
      const bottom15Percent = windowHeight * 0.10;
      const cursorY = e.clientY;

      if (cursorY >= windowHeight - bottom15Percent) {
        const cursorX = e.clientX;
        const newSizes = sortedTimelineData.map((event, index) => {
          const element = document.getElementById(`timeline-icon-${index}`);
          if (element) {
            const rect = element.getBoundingClientRect();
            const elementCenterX = rect.left + rect.width / 2;
            const elementCenterY = rect.top + rect.height / 2;
            const distanceX = cursorX - elementCenterX;
            const distanceY = cursorY - elementCenterY;
            const distance = Math.sqrt(distanceX ** 2 + distanceY ** 2);
            const maxDistance = 200;
            const scale = Math.max(1, 2 - (distance / maxDistance));
            return scale;
          }
          return 1;
        });
        setIconSizes(newSizes);
      } else {
        setIconSizes(sortedTimelineData.map(() => 1));
      }
    };

    window.addEventListener('mousemove', handleMouseMove);
    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
    };
  }, []);

  const handleMouseEnter = (event) => {
    setHoveredEvent(event);
  };

  const handleMouseLeave = () => {
    setHoveredEvent(null);
  };

  const handleClick = (event) => {
    setSelectedEvent(event);
  };

  return (
    <div className="timeline-container">
      {selectedEvent && (
        <div className="details">
          <h2>{selectedEvent.title}</h2>
          <p>{selectedEvent.description}</p>
          <img src={selectedEvent.img} alt={selectedEvent.title} />
        </div>
      )}
      <div className="timeline">
        {sortedTimelineData.map((event, index) => (
          <div
            key={event.id}
            className="timeline-item"
            onMouseEnter={() => handleMouseEnter(event)}
            onMouseLeave={handleMouseLeave}
            onClick={() => handleClick(event)}
          >
            <img
              id={`timeline-icon-${index}`}
              src={event.iconImg}
              alt={event.title}
              className={`timeline-icon ${hoveredEvent === event ? 'hovered' : ''}`}
              style={{ transform: `scale(${iconSizes[index]})` }}
            />
            {hoveredEvent === event && (
              <div className="tooltip">
                <img src={event.iconImg} alt={event.name} />
                <span>{event.title}</span>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default Timeline;

================
File: src/components/work/Card.css
================
/* AnimatedCard.css */

.card {
    width: 20rem;
    background-color: #fff;
    padding: 2rem;
    border-radius: 0.2rem;
    cursor: pointer;
  }
  
  .card h3 {
    font-size: 1.2rem;
    font-weight: 600;
    margin-bottom: 1rem;
  }
  
  .card p {
    font-size: 0.85rem;
    font-weight: 400;
    text-align: justify;
    margin-bottom: 1rem;
  }
  
  .card img {
      width: 100%;
      height: 200px;
      margin-bottom: 1rem;
      border-radius: 0.5rem;
  }
  
  .btn-container {
    display: flex;
    align-items: center;
    justify-content: flex-end;
  }
  
  .btn-container button {
    font-size: 0.92rem;
    font-weight: 600;
    color: #fff;
    background: linear-gradient(90deg, #0093FF 0%, #005CFF 100%);;
    padding: 0.5rem 2rem;
    border: none;
    border-radius: 0.3rem;
    cursor: pointer;
  }

================
File: src/components/work/Card.js
================
//Card.js

import React, { useState } from "react";
import "./Card.css";
import { motion } from "framer-motion";

const Card = () => {
  const [isExpaned, setIsExpaned] = useState(false);

  const animated = {
    layout: "position",
    animate: { opacity: 1 },
    transition: { delay: 0.3 },
    initial: { opacity: 0 },
  };

  return (
    <motion.div
      className="card"
      layout
      onClick={() => {
        setIsExpaned(!isExpaned);
      }}
    >
      <motion.h3 layout="position">Expandable Card 🔥</motion.h3>

      <motion.p layout="position">
        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Tenetur sunt
        consequuntur sint ullam blanditiis alias et consectetur animi voluptates
        quibusdam.
      </motion.p>

      {isExpaned && (
        <>
          <motion.img {...animated} src="./images/img1.png" alt="demo image" />

          <motion.p {...animated}>
            Perferendis dolorem! Voluptate iste reprehenderit voluptatem,
            assumenda est commodi, repudiandae enim eveniet cumque praesentium
            neque vero iure.
          </motion.p>

          <motion.div {...animated} className="btn-container">
            <motion.button
              onClick={() => {
                setIsExpaned(!isExpaned);
              }}
            >
              Close
            </motion.button>
          </motion.div>
        </>
      )}
    </motion.div>
  );
};

export default Card;

================
File: src/components/work/DetailView.css
================
.header-container{
    display: flex;
    flex-direction: row;
}
.header{
    width: 70%;
    display: flex;
    flex-direction: column;
}
.detail-title{
    margin:0em;
    padding-left: 10%;
    padding-top:1em;
    font-size: 2em;
    text-align: left;
}
.detail-date{
    padding-left:10%;  
    padding-top:.6em;  
    margin:0%;
    font-weight: 400;
}
.header-links{
    width:30%;
    margin: auto;
    display: flex;
    flex-direction: row;
    gap:2em;
    padding-left:15%;
    padding-top:1em;
}

.header-links a img{
    width:2.5rem;
    height: 2.5rem;

}
.header-container a img:hover{
transform: scale(1.1);
}

.icon-disabled {
    opacity: 0.0;      /* Make the image partially transparent */
    cursor: default;   /* Change cursor to default */
    pointer-events: none; /* Disable interactions */
}

detail-view{
    border-radius:1.8em;
}
.detail-view {
    /* Optional: Add smooth scrolling */
    scroll-behavior: smooth;
    overflow-y: auto; /* Ensure vertical scrolling */
    padding-right: 10px;
}

/* Customize scrollbar appearance */
.detail-view::-webkit-scrollbar {
    width: 10px !important; /* Adjust scrollbar width */
    background-color: rgba(0, 0, 0, 0) !important;

}

.detail-view::-webkit-scrollbar-thumb {
    background-color: rgba(0, 0, 0, 0.3) !important;
    border-radius: 10px !important;
    margin-right: -10px !important;
}

.detail-parent{
    display: flex;
}

.detail-img-container{
    width:55%;
    padding: 2.2em 2em 2em 3.6em;
    border-radius: 15%;
}
.detail-img{
    max-width: 100%;
    border-radius: 8px;
}

.detail-description{
    padding: 1em 1em;
}

.detail-container{
    width:45%;
    display: flex;
    flex-direction: column;
}

.skills-container {
    padding: 0em 1em;
}

.skills-container h3 {
    font-size: 1.2em;
    margin-bottom: 0.5em;
    color: #333;
}

.skills-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5em; /* Space between skill boxes */
    padding: 0;
    list-style-type: none;
    margin: 0;
}

.skill-item {
    background-color: #e0e0e0; /* Light gray background */
    color: #333;
    padding: 0.4em 0.8em;
    border-radius: 8px; /* Rounded corners */
    font-size: 0.9em;
    white-space: nowrap; /* Prevents text from wrapping to next line */
    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); /* Subtle shadow for effect */
}

/* Container for the image gallery */
.img-gallery {
    display: flex;
    flex-direction: column;  /* Stack images vertically */
    align-items: center;     /* Center images horizontally */
    gap: 1em;                /* Space between images */
    width: 100%;             /* Full width of container */
    padding: 1em 0;          /* Padding at top and bottom */
}

/* Individual images in the gallery */
.one-gallery-img {
    width: 90%;              /* Each image takes up 90% of the container width */
    max-width: 600px;        /* Optional max width for larger screens */
    border-radius: 8px;      /* Slight border radius for styling */
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
}

================
File: src/components/work/DetailView.js
================
import { motion } from "framer-motion";
import React, { useEffect } from "react";

import projects from './ProjectData/projects.js';
import './DetailView.css';
import ImgGallery from "./ImgGallery.js";

function DetailView({ selected, onClose }) {
    const project = projects.find((p) => p.id === selected);

    // Prevent background scrolling when DetailView is open
    useEffect(() => {
        document.body.classList.add("no-scroll");

        // Clean up by removing the class when component unmounts
        return () => {
            document.body.classList.remove("no-scroll");
        };
    }, []);

    if (!project) return null;

    return (
        <>
            <motion.div
                className="overlay"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                transition={{ delay: 0.15 }}
                onTap={onClose}
                style={{
                    position: "fixed",
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    background: "rgba(0, 0, 0, 0.8)",
                    zIndex: "1000",
                }}
            />

            <motion.div
                className="detail-view"
                layoutId={selected}
                initial={{ opacity: 0, scale: 0.8, y: 50, borderRadius: "30px" }}
                animate={{ opacity: 1, scale: 1, y: 0, borderRadius: "30px" }}
                exit={{ opacity: 0, scale: 0.8, y: 50 }}
                transition={{ duration: 0.4, ease: "easeInOut" }}
                style={{
                    position: "fixed",
                    top: "15%",
                    left: "15%",
                    transform: "translate(-50%, -50%)",
                    width: "70%",
                    height: "80%",
                    overflowY: "auto",
                    background: "white",
                    borderRadius: "30px",
                    zIndex: "1001",
                }}
            >
                <div className="header-container">
                    <div className="header">
                        <h2 className="detail-title">{project.title}</h2>
                        <h3 className="detail-date">{project.date}</h3>
                    </div>

                    <div className="header-links">
                        {project.liveLink ? (
                            <a href={project.liveLink}>
                                <img src="icons/website.png" alt="website-icon" />
                            </a>
                        ) : (
                            <a>
                                <img src="/icons/website.png" alt="Live Link Icon" className="icon-disabled" />
                            </a>
                        )}
                        <a href={project.gitLink}>
                            <img src="icons/github.png" alt="github-icon" />
                        </a>
                    </div>
                </div>

                <div className="detail-parent">
                    <div className="detail-img-container">
                        <img className="detail-img" src={project.thumbnail} />
                    </div>
                    <div className="detail-container">
                        <p className="detail-description">
                            {project.description.split("\n").map((line, index) => (
                                <React.Fragment key={index}>
                                    {line}
                                    <br />
                                </React.Fragment>
                            ))}
                        </p>

                        <div className="skills-container">
                            <ul className="skills-list">
                                {project.skills.map((skill, index) => (
                                    <li key={index} className="skill-item">{skill}</li>
                                ))}
                            </ul>
                        </div>
                    </div>
                </div>

                <ImgGallery images={project.images} />
            </motion.div>
        </>
    );
}

export default DetailView;

================
File: src/components/work/ImgGallery.js
================
import React from "react";

const ImgGallery = ({images}) => {
    
    if (!Array.isArray(images) || images.length === 0) {
        return <p></p>; 
    }

    return (
        <div className="img-gallery">
        {images.map((img, index) => (
            <img className="one-gallery-img" key={index} src={img} alt={`Gallery image ${index + 1}`} />
        ))}
    </div>    );
}

export default ImgGallery;

================
File: src/components/work/ProjectData/projects.js
================
import tempPhoto from './images/temp.JPG';

const projects = [
  {
      id: "1",
      title: "OurOutdoors",
      description: "OurOutdoors is a social media platform tailored for outdoor enthusiasts who want to explore, connect, and coordinate activities together. Built using the MERN stack (MongoDB, Express, React, and Node.js), the app provides a responsive, scalable solution for users to organize and participate in outdoor events, rides, and excursions. Through a range of interactive features, OurOutdoors allows users to both request and offer rides, create and join events, post comments, manage friend connections, and react to activities through likes. \n \n The application’s backend leverages MongoDB for efficient data storage and retrieval, ensuring smooth management of user data, event details, and real-time notifications. The frontend, built with React, ensures an intuitive and engaging user interface where members can easily browse or create events by selecting the activity type, skill level, location, and time. A built-in notification system updates users on friend requests, ride offers, and event comments, fostering a close-knit, active community. \n \n With robust security features, user authentication, and friend-request options, OurOutdoors balances community interaction with data protection, making it an ideal platform for outdoor enthusiasts to safely connect and share their adventures.",
      thumbnail: tempPhoto,
      skills: ["RoadMapping", "React.js", "Node.js", "Express.js", "Mongoose", "REST API"],
      liveLink: "",
      gitLink: "https://github.com/ettrafto/ouroutdoors",
      date: "2024",
      images: []
  },
  {
      id: "2",
      title: "Vermont Legislature Bill Lookup",
      description: "My Vermont Legislature Bill Site is an open-source web application developed to help Vermont citizens easily access and understand the bill activities of their local legislators. Designed with a district-focused approach, the application allows users to select specific districts on an interactive map, offering a localized view of legislative actions by representatives from those areas. Once a district is chosen, users can sort and filter bills by sponsorship involvement, enabling them to track and monitor their legislators’ contributions more closely. \n \nThe application leverages a robust tech stack—React.js and Framer Motion for a seamless, engaging frontend experience, alongside Nginx, Node.js, and Playwright for efficient backend performance. Key features include district-based bill access, legislator-specific sorting, and smooth, intuitive animations, all designed to ensure that users, whether citizens or editorial teams like those at the Herald newspaper, can engage with the information effortlessly. As an open-source project, this tool emphasizes accessibility, storing data in local JSON files to simplify setup and use without the need for complex databases. Developed in collaboration with the Center for Vermont Research, the site is hosted on UVM’s servers, supporting a transparent, straightforward civic engagement experience for the Vermont community.",
      thumbnail: '/images/vtLegistlature1.png',
      skills: ["Project Management", "React.js", "Node.js", "Express.js", "SQL Lite", "APIs", "D3", "Framer Motion"],
      liveLink: "",
      gitLink: "https://github.com/ettrafto/CRVT-Local-Legislators",
      date: "Fall 2024",
      images: []
  },
  {
      id: "3",
      title: "ScubaDiver",
      description: "For the final project in CS2300: Advanced Programming, I developed a 3D scuba diving game using vanilla OpenGL and GLSW. This project simulates an underwater environment where players explore randomly generated cave systems to collect treasure. The user can adjust their swimming speed, impacting the rate of oxygen depletion. Oxygen levels vary based on movement speed, and the game tracks and displays elapsed time and remaining oxygen to challenge the player. \n \nRandom Cave Generation: The cave generation algorithm uses procedural methods to create unique pathways each time the game is played, ensuring a new experience with every session. The randomization algorithm accounts for open spaces, narrow passages, and branching paths, making each underwater cave system intricate and rewarding to explore.",
      thumbnail: '/images/scubaDiver3.gif',
      skills: ["C++", "OpenGL", "GLSW"],
      liveLink: "",
      gitLink: "https://github.com/ettrafto/scubaDiver",
      date: "Fall 2023",
      images: ['/images/scubaDiver1.png','/images/scubaDiver5.png','/images/scubaDiver2.png']
  },
  {
      id: "4",
      title: "MyMoney",
      description: "The MyMoney web application is designed to help users visualize and manage their personal finances effectively. Utilizing CanvasJS, the app presents users' spending patterns through interactive graphs, offering clear insights into their financial habits. Users can set and monitor spending goals, track progress, and make informed decisions to achieve their financial objectives. The application features a user-friendly interface with sections for account balances, recent transactions, and budget goals, ensuring a comprehensive overview of one's financial status. By combining data visualization with goal-setting functionalities, MyMoney serves as a valuable tool for individuals aiming to enhance their financial well-being.",
      thumbnail: '/images/mymoney1.png',
      skills: ["HTML", "PHP", "CSS", "Canvas.js", "WebDB"],
      liveLink: "",
      gitLink: "https://github.com/ettrafto/mymoney",
      date: "Fall 2023",
      images: ['/images/mymoney2.png']
  },
  {
    id: "5",
    title: "MySafari",
    description: "MySafari is a web project designed to document and share my photography from my family's safari experience in Tanzania. Over the course of a week, this journey highlights encounters with diverse wildlife. The Home Page introduces the safari, capturing the essence of the adventure with background information concerning Tanzania and the history of safari. A Featured Section showcases selected highlights, including significant wildlife sightings. The Animals Page presents detailed information and photographs of the various species observed, offering the user the ability to sort by animal. On the about me page I selected some silly pictures of myself and included a form with the ability to contact me.",
    thumbnail: '/images/mysafari1.png',
    skills: ["HTML", "PHP", "CSS", "WebDB"],
    liveLink: "",
    gitLink: "https://github.com/ettrafto/mysafari",
    date: "Fall 2023",
    images: ['/images/mysafari4.png','/images/mysafari2.png','/images/mysafari3.png']
}
];

export default projects;

================
File: src/components/work/Thumbnail.js
================
import { motion } from "framer-motion";
import { useEffect } from "react";
// Import the static image
import tempThumbnail from './ProjectData/images/temp.JPG';

function Thumbnail({ id, projectName, projectThumbnail, setSelected }) {
    useEffect(() => {
        const img = new Image();
        img.src = tempThumbnail; // Preload the bigger version
    }, []);

    return (
        <motion.div
            className="thumbnail"
            layoutId={id}
            style={{
                backgroundSize: "cover",
                backgroundImage: `url(${projectThumbnail})`,
                borderRadius: "30px",
                overflow: "hidden", // Ensure image respects the border-radius
                cursor: "pointer"   // Add a pointer cursor for better UX
            }}
            onTap={() => setSelected(id)}
        >
            <div className="card-title">{projectName}</div>
        </motion.div>
    );
}

export default Thumbnail;

================
File: src/context/AuthContext.js
================
import React, { createContext, useState, useContext } from 'react';

const AuthContext = createContext();

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  const login = (password) => {
    const correctPassword = 'password';
    if (password === correctPassword) {
      setIsAuthenticated(true);
      return true;
    }
    return false;
  };

  const logout = () => {
    setIsAuthenticated(false);
  };

  return (
    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

================
File: src/index.css
================
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  --primary: #5866f2;
  --primary-content: #ffffff;
  --primary-dark: #293bee;
  --primary-light: #8791f6;
  
  --secondary: #f2d758;
  --secondary-content: #463a05;
  --secondary-dark: #eecc29;
  --secondary-light: #f6e287;
  
  --background: #131420;
  --foreground: #1d1e30;
  --border: #303350;
  
  --copy: #fafafc;
  --copy-light: #cfd1e2;
  --copy-lighter: #8f93bc;
  
  --success: #58f258;
  --warning: #f2f258;
  --error: #f25858;
  --success-content: #054605;
  --warning-content: #464605;
  --error-content: #460505;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

================
File: src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { BrowserRouter } from 'react-router-dom';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/pages/About.js
================
import React from 'react';
import { motion, useIsPresent } from "framer-motion";

import UnderContsrtuction from '../components/contact/util/UnderConstruction';


const About = () => {
  const isPresent = useIsPresent();

  return (
    <>
      <motion.div
          initial={{ scaleX: 1 }}
          animate={{ scaleX: 0, transition: { duration: 0.5, ease: "circOut" } }}
          exit={{ scaleX: 1, transition: { duration: 0.5, ease: "circIn" } }}
          style={{ originX: isPresent ? 0 : 1 }}
          className="privacy-screen"
        />
    
      <UnderContsrtuction/>
    </>

  );
};

export default About;

================
File: src/pages/Blog.js
================
import React from 'react';

const Blog = () => {
  return (
    <div>
      <h1>Blog</h1>
      {/* Add your blog page content here */}
    </div>
  );
};

export default Blog;

================
File: src/pages/Contact.js
================
import React from 'react';
import { motion, useIsPresent } from "framer-motion";
import ContactForm from '../components/contact/ContactForm';


const Contact = () => {
  const isPresent = useIsPresent();

  return (
    <>
      <motion.div
          initial={{ scaleX: 1 }}
          animate={{ scaleX: 0, transition: { duration: 0.5, ease: "circOut" } }}
          exit={{ scaleX: 1, transition: { duration: 0.5, ease: "circIn" } }}
          style={{ originX: isPresent ? 0 : 1 }}
          className="privacy-screen"
        />
    
      <div>
        <ContactForm />
      </div>
    </>

  );
};

export default Contact;

================
File: src/pages/Home.css
================
/* Base styles */
* {
    /* border: 1px solid blue; */
    box-sizing: border-box;
}

/* SECTION 1 */
.home-container1 {
    margin: 1%;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
}

.home-container * {
    margin: 3%;
}

.name-container {
    width: 55%;
    padding-left: 10%;
    padding-top: 4%;
}

.fname, .lname {
    font-size: 800%;
    font-family: inherit;
    font-weight: 700;
    margin: auto;
}

.details {
    margin: auto;
    font-size: 200%;
    font-family: inherit;
    font-weight: 400;
    padding-top: 2em;
}

.perlin-bubble {
    width: 45%;
}

/* SECTION 2 */
.home-container2 {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
}

.venn-diagram-container {
    width: 45%;
}

.interests-container {
    width: 55%;
}

/* Responsive Styles */
@media (max-width: 1200px) {
    .fname, .lname {
        font-size: 600%;
    }

    .details {
        font-size: 180%;
    }
}

@media (max-width: 900px) {
    .home-container1, .home-container2 {
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .name-container, .perlin-bubble, .venn-diagram-container, .interests-container {
        width: 100%;
        padding-left: 0;
        padding-top: 5%;
    }

    .fname, .lname {
        font-size: 500%;
    }

    .details {
        font-size: 150%;
    }
}

@media (max-width: 600px) {
    .fname, .lname {
        font-size: 400%;
    }

    .details {
        font-size: 120%;
    }

    .home-container * {
        margin: 1%;
    }
}

================
File: src/pages/Home.js
================
import React from 'react';
import { motion, useIsPresent } from "framer-motion";

import './Home.css';
import PerlinNoiseCircle from '../components/Profile/PerlinNoiseCircle';

const Home = () => {
  const isPresent = useIsPresent();

  return (
    <>
      <motion.div
        initial={{ scaleX: 1 }}
        animate={{ scaleX: 0, transition: { duration: 0.5, ease: "circOut" } }}
        exit={{ scaleX: 1, transition: { duration: 0.5, ease: "circIn" } }}
        style={{ originX: isPresent ? 0 : 1 }}
        className="privacy-screen"
      />
      <div className='home-container1'>
        <div className='name-container'>
          <h1 className='fname'>Evan</h1>
          <h1 className='lname'>Trafton</h1>
          <div className='details'>Aspiring Full Stack Developer</div>
        </div>

        <PerlinNoiseCircle className="profile"/>

      </div>
      <div className='home-container2'>
        <div className='venn-diagram-container'>
          
        </div>
        <div className='interests-container'></div>

      </div>

    </>
  );
};

export default Home;

================
File: src/pages/manager/Manager.css
================
.password-prompt {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100vh;
  }
  
  .password-prompt h2 {
    margin-bottom: 20px;
  }
  
  .password-prompt form {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .password-prompt input {
    margin-bottom: 10px;
    padding: 10px;
    font-size: 16px;
  }
  
  .password-prompt button {
    padding: 10px 20px;
    font-size: 16px;
    cursor: pointer;
  }
  
  .managers-page {
    padding: 20px;
  }

================
File: src/pages/manager/Manager.js
================
import React, { useState } from 'react';
import { AuthProvider, useAuth } from '../../context/AuthContext';
import { Route, Routes } from 'react-router-dom';


import ManagerNavBar from '../../components/manager/ManagerNavBar';
import './Manager.css';

const Manager = () => {
  const [password, setPassword] = useState('');
  const { isAuthenticated, login } = useAuth();

  const handlePasswordChange = (e) => {
    setPassword(e.target.value);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!login(password)) {
      alert('Incorrect password');
      setPassword('');
    }
  };

  if (!isAuthenticated) {
    return (
      <div className="password-prompt">
        <h2>Enter Password to Access Managers Page</h2>
        <form onSubmit={handleSubmit}>
          <input
            type="password"
            value={password}
            onChange={handlePasswordChange}
            placeholder="Password"
          />
          <button type="submit">Submit</button>
        </form>
      </div>
    );
  }

  return (
    <AuthProvider>
      <div className="managers-page">
        <ManagerNavBar />
        <h1>Managers Page</h1>

      </div>
    </AuthProvider>
  );
};

export default Manager;

================
File: src/pages/manager/ManagerAddBlog.js
================
import React, { useState } from 'react';
import { createBlog } from '../../services/api/blogs';

import ManagerNavBar from '../../components/manager/ManagerNavBar';


const ManagerAddBlog = () => {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    await createBlog({ title, content });
    setTitle('');
    setContent('');
  };

  return (
    <div>
      <ManagerNavBar />

      <h1>Add Blog</h1>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          required
        />
        <textarea
          placeholder="Content"
          value={content}
          onChange={(e) => setContent(e.target.value)}
          required
        />
        <button type="submit">Add Blog</button>
      </form>
    </div>
  );
};

export default ManagerAddBlog;

================
File: src/pages/manager/ManagerAddPost.js
================
import React, { useState } from 'react';
import { createPost } from '../../services/api/posts';

import ManagerNavBar from '../../components/manager/ManagerNavBar';

const ManagerAddPost = () => {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [image, setImage] = useState('');
  const [skills, setSkills] = useState('');
  const [link, setLink] = useState('');
  const [date, setDate] = useState('');
  const [gitlink, setGitlink] = useState('');
  const [iconImg, setIconImg] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    const post = {
      title,
      description,
      image,
      skills: skills.split(',').map(skill => skill.trim()), // Convert comma-separated skills to an array
      link,
      date,
      gitlink,
      iconImg
    };
    try {
      await createPost(post);
      setTitle('');
      setDescription('');
      setImage('');
      setSkills('');
      setLink('');
      setDate('');
      setGitlink('');
      setIconImg('');
    } catch (error) {
      console.error('Error creating post:', error);
    }
  };

  return (
    <div>
      <ManagerNavBar />

      <h1>Add Post</h1>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          required
        />
        <textarea
          placeholder="Description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          required
        />
        <input
          type="text"
          placeholder="Image URL"
          value={image}
          onChange={(e) => setImage(e.target.value)}
          required
        />
        <input
          type="text"
          placeholder="Skills (comma-separated)"
          value={skills}
          onChange={(e) => setSkills(e.target.value)}
          required
        />
        <input
          type="text"
          placeholder="Project Link"
          value={link}
          onChange={(e) => setLink(e.target.value)}
          required
        />
        <input
          type="date"
          placeholder="Date"
          value={date}
          onChange={(e) => setDate(e.target.value)}
          required
        />
        <input
          type="text"
          placeholder="GitHub Link"
          value={gitlink}
          onChange={(e) => setGitlink(e.target.value)}
          required
        />
        <input
          type="text"
          placeholder="Icon Image URL"
          value={iconImg}
          onChange={(e) => setIconImg(e.target.value)}
          required
        />
        <button type="submit">Add Post</button>
      </form>
    </div>
  );
};

export default ManagerAddPost;

================
File: src/pages/manager/ManagerBlogs.js
================
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { getBlogs, deleteBlog } from '../../services/api/blogs';
import ManagerNavBar from '../../components/manager/ManagerNavBar';

const ManagerBlogs = () => {
  const [blogs, setBlogs] = useState([]);

  useEffect(() => {
    const fetchBlogs = async () => {
      const blogs = await getBlogs();
      setBlogs(blogs);
    };
    fetchBlogs();
  }, []);
  console.log(blogs)

  const handleDelete = async (_id) => {
    await deleteBlog(_id);
    setBlogs(blogs.filter(blog => blog._id !== _id));
  };

  return (
    <div>
      <ManagerNavBar />
      <h1>Manage Blogs</h1>
      <ul>
        {blogs.map(blog => (
          <li key={blog._id}>
            {blog.title}
            <Link to={`/manager/update-blog/${blog._id}`}>Edit</Link>
            <button onClick={() => handleDelete(blog._id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ManagerBlogs;

================
File: src/pages/manager/ManagerPosts.js
================
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { getPosts, deletePost } from '../../services/api/posts';
import ManagerNavBar from '../../components/manager/ManagerNavBar';

const ManagerPosts = () => {
  const [posts, setPosts] = useState([]);

  useEffect(() => {
    const fetchPosts = async () => {
      const posts = await getPosts();
      setPosts(posts);
    };
    fetchPosts();
  }, []);

  const handleDelete = async (_id) => {
    try {
      await deletePost(_id);
      setPosts(posts.filter(post => post._id !== _id));
    } catch (error) {
      console.error("Failed to delete the post:", error);
    }
  };

  return (
    <div>
      <ManagerNavBar />
      <h1>Manage Posts</h1>
      <ul>
        {posts.map(post => (
          <li key={post._id}>
            {post.title}
            <Link to={`/manager/update-post/${post._id}`}>Edit</Link>
            <button onClick={() => handleDelete(post._id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ManagerPosts;

================
File: src/pages/manager/UpdateBlog.js
================
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { getBlog, updateBlog } from '../../services/api/blogs';

import ManagerNavBar from '../../components/manager/ManagerNavBar';


const UpdateBlog = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [title, setTitle] = useState('');
  const [date, setDate] = useState('');
  const [content, setContent] = useState('');

  useEffect(() => {
    const fetchBlog = async () => {
      try {
        const blog = await getBlog(id);
        setTitle(blog.title);
        setDate(blog.date);
        setContent(blog.content);
      } catch (error) {
        console.error('Error fetching blog:', error);
      }
    };
    fetchBlog();
  }, [id]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const updatedBlog = {
      title,
      date,
      content
    };
    try {
      await updateBlog(id, updatedBlog);
      navigate('/manager/blog');
    } catch (error) {
      console.error('Error updating blog:', error);
    }
  };
  console.log(date)
  return (
    <div>
      <ManagerNavBar />

      <h1>Update Blog</h1>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          required
        />
        <input
          type="date"
          placeholder="Date"
          value={date}
          onChange={(e) => setDate(e.target.value)}
          required
        />
        <textarea
          placeholder="Content"
          value={content}
          onChange={(e) => setContent(e.target.value)}
          required
        />
        <button type="submit">Update Blog</button>
      </form>
    </div>
  );
};

export default UpdateBlog;

================
File: src/pages/manager/UpdatePost.js
================
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { getPost, updatePost } from '../../services/api/posts';

import ManagerNavBar from '../../components/manager/ManagerNavBar';

const UpdatePost = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [image, setImage] = useState('');
  const [skills, setSkills] = useState('');
  const [link, setLink] = useState('');
  const [date, setDate] = useState('');
  const [gitlink, setGitlink] = useState('');
  const [iconImg, setIconImg] = useState('');

  useEffect(() => {
    const fetchPost = async () => {
      try {
        const post = await getPost(id);
        setTitle(post.title);
        setDescription(post.description);
        setImage(post.image);
        setSkills(post.skills.join(', '));
        setLink(post.link);
        setDate(post.date);
        setGitlink(post.gitlink);
        setIconImg(post.iconImg);
      } catch (error) {
        console.error('Error fetching post:', error);
      }
    };
    fetchPost();
  }, [id]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const updatedPost = {
      title,
      description,
      image,
      skills: skills.split(',').map(skill => skill.trim()),
      link,
      date,
      gitlink,
      iconImg
    };
    try {
      await updatePost(id, updatedPost);
      navigate('/manager/posts');
    } catch (error) {
      console.error('Error updating post:', error);
    }
  };

  return (
    <div>
      <ManagerNavBar />

      <h1>Update Post</h1>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          required
        />
        <textarea
          placeholder="Description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          required
        />
        <input
          type="text"
          placeholder="Image URL"
          value={image}
          onChange={(e) => setImage(e.target.value)}
          required
        />
        <input
          type="text"
          placeholder="Skills (comma-separated)"
          value={skills}
          onChange={(e) => setSkills(e.target.value)}
          required
        />
        <input
          type="text"
          placeholder="Project Link"
          value={link}
          onChange={(e) => setLink(e.target.value)}
          required
        />
        <input
          type="date"
          placeholder="Date"
          value={date}
          onChange={(e) => setDate(e.target.value)}
          required
        />
        <input
          type="text"
          placeholder="GitHub Link"
          value={gitlink}
          onChange={(e) => setGitlink(e.target.value)}
          required
        />
        <input
          type="text"
          placeholder="Icon Image URL"
          value={iconImg}
          onChange={(e) => setIconImg(e.target.value)}
          required
        />
        <button type="submit">Update Post</button>
      </form>
    </div>
  );
};

export default UpdatePost;

================
File: src/pages/Work.css
================
.card-container {
    display: flex;
    flex-wrap: wrap;
    gap: 3em;
    padding: 4em;
    justify-content: center; /* Center-align cards */
}

.thumbnail {
    flex: 1 1 calc(30% - 20px);
    aspect-ratio: 16 / 9;       
    overflow: hidden;
    border-radius: 1.8rem;
    background-color: #f0f0f0;
    border: solid black 1.5px;

}

.thumbnail:hover {
    transform: scale(1.01);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3), 0 6px 20px rgba(0, 0, 0, 0.19);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}


/* Image styling */
.thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 1.8rem;
}

/* Force 2-column layout when only 1 card is left in a row on large screens */
@media (min-width: 1200px) {
    .card-container > :nth-last-child(1):nth-child(3n + 1),
    .card-container > :nth-last-child(1):nth-child(3n + 2) {
        flex: 1 1 calc(49% - 20px); /* Adjust to two columns */
        flex-grow: 0;
        flex-shrink: 0;
    }
}

/* Medium screen: Adjust to two columns */
@media (max-width: 1200px) {
    .thumbnail {
        flex: 1 1 calc(49% - 20px);
    }
}

/* Small screen: Single column */
@media (max-width: 750px) {
    .thumbnail {
        flex: 1 1 100%;
    }
}

.card-title {
    background-color: rgba(0, 0, 0, 0.90);
    padding: 1em;
    border-radius: 1.8rem 1.8rem 0 0;
    text-align: center;
    font-weight: bold;
    color:white;
}

================
File: src/pages/Work.js
================
import React, {useState} from 'react';
import { motion, useIsPresent, AnimatePresence } from "framer-motion";

import DetailView from '../components/work/DetailView';
import Thumbnail from '../components/work/Thumbnail';


import "./Work.css";

import projects from '../components/work/ProjectData/projects.js';

const Work = () => {
  const isPresent = useIsPresent();
  const [selected, setSelected] = useState(null);


  return (
    <>
       <motion.div
        initial={{ scaleX: 1 }}
        animate={{ scaleX: 0, transition: { duration: 0.5, ease: "circOut" } }}
        exit={{ scaleX: 1, transition: { duration: 0.5, ease: "circIn" } }}
        style={{ originX: isPresent ? 0 : 1 }}
        className="privacy-screen"
      />


      <div className="card-container">
        {projects.map((project) => (
              <Thumbnail
                  className="card"
                  key={project.id}
                  id={project.id}
                  projectThumbnail = {project.thumbnail}
                  projectName={project.title}
                  imageUrl={project.thumbnail}
                  setSelected={setSelected}
              />
            ))}
        </div>

        <AnimatePresence>
            {selected && <DetailView selected={selected} onClose={() => setSelected(null)} />}
        </AnimatePresence>
    </>
);
}
 

export default Work;

================
File: src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/services/api/blogs.js
================
import axios from 'axios';

const API_URL = 'http://localhost:5000/api/blogs';

export const getBlogs = async () => {
  const response = await axios.get(API_URL);
  return response.data;
};

export const getBlog = async (_id) => {
  const response = await axios.get(`${API_URL}/${_id}`);
  return response.data;
};

export const createBlog = async (blog) => {
  const response = await axios.post(API_URL, blog);
  return response.data;
};

export const updateBlog = async (_id, blog) => {
  const response = await axios.patch(`${API_URL}/${_id}`, blog);
  return response.data;
};

export const deleteBlog = async (_id) => {
  const response = await axios.delete(`${API_URL}/${_id}`);
  return response.data;
};

================
File: src/services/api/posts.js
================
import axios from 'axios';

const API_URL = 'http://localhost:5000/api/posts';

export const getPosts = async () => {
  const response = await axios.get(API_URL);
  return response.data;
};

export const getPost = async (_id) => {
  const response = await axios.get(`${API_URL}/${_id}`);
  return response.data;
};

export const createPost = async (post) => {
  const response = await axios.post(API_URL, post);
  return response.data;
};

export const updatePost = async (_id, post) => {
  const response = await axios.patch(`${API_URL}/${_id}`, post);
  return response.data;
};

export const deletePost = async (_id) => {
  const response = await axios.delete(`${API_URL}/${_id}`);
  return response.data;
};

================
File: src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
